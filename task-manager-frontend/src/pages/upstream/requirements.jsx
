// RequirementsPage.jsx ― ステップ②：要求定義
import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../../App';
import './UpstreamCommon.css';         // 既存スタイル

export default function RequirementsPage() {
  const [rows,    setRows]    = useState([]);
  const [loading, setLoading] = useState(true);

  /* ---------- 初期ロード ---------- */
  useEffect(() => { load(); }, []);
  const load = async () => {
    setLoading(true);
    try {
      const r = await fetch(`${API_BASE_URL}/requirements`);
      if (!r.ok) throw new Error(`HTTP ${r.status}`);
      setRows(await r.json());
    } catch (e) {
      console.error('❌ 要求取得失敗:', e);
      alert('要求一覧の取得に失敗しました');
    } finally { setLoading(false); }
  };

  /* ---------- 行追加 ---------- */
  const handleAdd = async () => {
    const blank = { title:'', type:'FR', priority:'M', status:'検討中', notes:'' };
    const r     = await fetch(`${API_BASE_URL}/requirements`, {
      method : 'POST',
      headers: { 'Content-Type':'application/json' },
      body   : JSON.stringify(blank)
    });
    if (r.ok) load();
  };

  /* ---------- インライン編集 ---------- */
  const upd = (id, key, val) => setRows(rows.map(x=>x.id===id?{...x,[key]:val}:x));
  const save = row => fetch(`${API_BASE_URL}/requirements/${row.id}`, {
    method:'PUT', headers:{'Content-Type':'application/json'}, body:JSON.stringify(row)
  });

  /* ---------- 削除 ---------- */
  const del = async id =>{
    if(!window.confirm('削除しますか？')) return;
    await fetch(`${API_BASE_URL}/requirements/${id}`,{method:'DELETE'});
    load();
  };

  if (loading) return <p>読み込み中…</p>;

  /* ---------- 描画 ---------- */
  return (
    <div className="up-card">
      <h2>📝 要求定義</h2>

      <table className="up-table">
        <thead>
          <tr>
            <th>要求タイトル</th>
            <th>種別</th>
            <th>優先度</th>
            <th>状態</th>
            <th>備考</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {rows.map(r=>(
            <tr key={r.id}>
              <td><input value={r.title}
                         onChange={e=>upd(r.id,'title',e.target.value)}
                         onBlur={()=>save(r)} /></td>

              <td>
                <select value={r.type}
                        onChange={e=>{upd(r.id,'type',e.target.value); save({...r,type:e.target.value});}}>
                  <option value="FR">FR</option>
                  <option value="NFR">NFR</option>
                </select>
              </td>

              <td>
                <select value={r.priority}
                        onChange={e=>{upd(r.id,'priority',e.target.value); save({...r,priority:e.target.value});}}>
                  <option value="H">H</option>
                  <option value="M">M</option>
                  <option value="L">L</option>
                </select>
              </td>

              <td>
                <select value={r.status}
                        onChange={e=>{upd(r.id,'status',e.target.value); save({...r,status:e.target.value});}}>
                  <option value="検討中">検討中</option>
                  <option value="承認">承認</option>
                  <option value="却下">却下</option>
                </select>
              </td>

              <td><input value={r.notes}
                         onChange={e=>upd(r.id,'notes',e.target.value)}
                         onBlur={()=>save(r)} /></td>

              <td><button onClick={()=>del(r.id)}>🗑</button></td>
            </tr>
          ))}
        </tbody>
      </table>

      <button className="add-btn" onClick={handleAdd}>➕ 行を追加</button>
    </div>
  );
}